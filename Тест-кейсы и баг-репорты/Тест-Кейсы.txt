Метод получения списока всех книг:

Идентификатор
reg-101

Название
Проверка получения списока книг

Описание
Мы используем тестовые данные:
	URL API:
	http://localhost:5000/api/books
	Метод:
	GET

Предусловие
Запущен Docker conteiner с API

Шаги

Шаг 1
Включить Рostman

Ожидаемый результат
Открывается Postman 

Шаг 2
Ввести в поле “Enter URL or paste text” адрес URL API тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 3
Слево от поля “Enter URL or paste text”, выбрать метод из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 4
Нажать кнопку “Send”

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 200OK
-	Ответ на запрос выдает список книг
-	Список не пустой

--------------------------------------------------

Идентификатор
reg-102

Название
Проверка наличия всех полей Json у книг и их соответствия 

Описание
Мы используем тестовые данные:
	URL API:
	http://localhost:5000/api/books
	Метод:
	GET

Предусловие
Запущен Docker conteiner с API

Шаги

Шаг 1
Включить Рostman

Ожидаемый результат
Открывается Postman 

Шаг 2
Ввести в поле “Enter URL or paste text” адрес URL API тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 3
Слево от поля “Enter URL or paste text”, выбрать метод из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 4
Нажать кнопку “Send”

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 200OK
-	Ответ на запрос выдает список книг
-	У книг присутствуют поля: "id", "author", "isElectronicBook", "name", "year"
-	У книг уникальный id
-	У книг ключ "id" равен числу 
-	У книг "year" равен числу
-	У книг "isElectronicBook" имеет только булевое значение 

--------------------------------------------------

Идентификатор
reg-103

Название
Проверка, отправки запроса с разными методами

Описание
Мы используем тестовые данные:
	URL API:
	http://localhost:5000/api/books
	Метод:
	PUT, DELETE
В данном тест-кейсе мы пытаемся инициализировать запрос с неправильными методами поочередно

Предусловие
Запущен Docker conteiner с API

Шаги

Шаг 1
Включить Рostman

Ожидаемый результат
Открывается Postman 

Шаг 2
Ввести в поле “Enter URL or paste text” адрес URL API тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 3
Слево от поля “Enter URL or paste text”, выбрать один из методов из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 4
Нажать кнопку “Send”

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 405 METHOD NOT ALLOWED
-	Ответ на запрос не выдает список книг

Шаг 5 
Повторить предыдущие шаги с другим методом из тестового набора данных

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 405 METHOD NOT ALLOWED
-	Ответ на запрос не выдает список книг

--------------------------------------------------
--------------------------------------------------
--------------------------------------------------

Метод получения книги по id:

Идентификатор
reg-201

Название
Проверка получения книги по id 

Описание
Мы используем тестовые данные:
	URL API:
	http://localhost:5000/api/books/2 - будем брать точно существующий id, можно и другой существующий номер id
	Метод:
	GET

Предусловие
Запущен Docker conteiner с API

Шаги

Шаг 1
Включить Рostman

Ожидаемый результат
Открывается Postman 

Шаг 2
Ввести в поле “Enter URL or paste text” адрес URL API тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 3
Слево от поля “Enter URL or paste text”, выбрать метод из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 4
Нажать кнопку “Send”

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 200OK
-	Ответ на запрос выдает книгу 
-	Значения поля id в ответе соотвествует запрашиваемому id

--------------------------------------------------

Идентификатор
reg-202

Название
Проверка получения книги по id и проверка соответствия полей 

Описание
Мы используем тестовые данные:
	Первый запрос:
		URL API:
		http://localhost:5000/api/books/2 - будем брать точно существующий id, можно и другой существующий номер id
		Метод:
		GET
	Второй запрос:
		URL API:
		http://localhost:5000/api/books
		Метод:
		GET
Первым запросом мы получаем книгу, затем инициализируем второй запрос, находим книгу с id из первого запроса. Сверяем данные этих книг

Предусловие
Запущен Docker conteiner с API

Шаги

Шаг 1
Включить Рostman

Ожидаемый результат
Открывается Postman 

Шаг 2
Ввести в поле “Enter URL or paste text” адрес URL API первого запроса из тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 3
Слево от поля “Enter URL or paste text”, выбрать метод из первого запроса, тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 4
Нажать кнопку “Send”

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 200OK
-	Значения поля id в ответе соотвествует запрашиваемому id
-	У книг присутствуют поля: "id", "author", "isElectronicBook", "name", "year"
-	У книг ключ "id" равен числу 
-	У книг "year" равен числу
-	У книг "isElectronicBook" имеет только булевое значение 

Шаг 5
Ввести в поле “Enter URL or paste text” адрес URL API второго запроса из тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 6
Слево от поля “Enter URL or paste text”, выбрать метод из второго запроса, тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 7
Нажать кнопку “Send”

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 200OK
-	Ответ на запрос выдает список книг
-	Список не пустой

Шаг 8 
Найти книгу с id из первого запроса 

Ожидаемый результат
-	У книги присутствуют поля: "id", "author", "isElectronicBook", "name", "year"
-	У книги ключ "id" равен одному и тому же числу, что и при первом запросе
-	У книги "year" равен одному и тому же числу, что и при первом запросе
-	У книги "isElectronicBook" равен одному и тому же логическому типу, что и при первом запросе
-	У книги "name" равен одному и тому же названию, что и при первом запросе
-	У книги "author" равен одному и тому же автору, что и при первом запросе

----------------------------------------

Идентификатор
reg-203

Название
Проверка получения книги по id с не корректным методом

Описание
Мы используем тестовые данные:
	URL API:
	http://localhost:5000/api/books/2 - будем брать точно существующий id, можно и другой существующий номер id
	Метод:
	POST, PUT
В данном тест-кейсе мы пытаемся инициализировать запрос с неправильными методами поочередно


Предусловие
Запущен Docker conteiner с API

Шаги

Шаг 1
Включить Рostman

Ожидаемый результат
Открывается Postman 

Шаг 2
Ввести в поле “Enter URL or paste text” адрес URL API тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 3
Слево от поля “Enter URL or paste text”, выбрать один из методов из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 4
Нажать кнопку “Send”

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 405 METHOD NOT ALLOWED
-	Ответ на запрос не выдает список книг

Шаг 5 
Повторить предыдущие шаги с другим методом из тестового набора данных

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 405 METHOD NOT ALLOWED
-	Ответ на запрос не выдает список книг

----------------------------------------------

Метод получения книги по id:

Идентификатор
reg-204

Название
Проверка получения книги по id, с не правильным id

Описание
Мы используем тестовые данные:
	URL API:
	http://localhost:5000/api/books/9999 - будем брать точно не существующий id, можно и другой не существующий номер id
	Метод:
	GET

Предусловие
Запущен Docker conteiner с API

Шаги

Шаг 1
Включить Рostman

Ожидаемый результат
Открывается Postman 

Шаг 2
Ввести в поле “Enter URL or paste text” адрес URL API тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 3
Слево от поля “Enter URL or paste text”, выбрать метод из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 4
Нажать кнопку “Send”

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 404NOT FOUND
-	Ответ на запрос выдает "error": "Book with id 6000 not found"

--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
Метод создания новой книги:


Идентификатор
reg-301

Название
Проверка создания новой книги

Описание
Мы используем тестовые данные:
	Первый запрос:
		URL API:
		http://localhost:5000/api/books
		Метод:
		POST
	JSON:
        {
            "author": "Роберт Мартин",
            "id": "",
            "isElectronicBook": false,
            "name": "Чистый код",
            "year": 1998
        }
	Второй запрос:
		URL API:
		http://localhost:5000/api/books/ сюда надо будет вставить значения, которое сгенерируется после первого запроса 
		Метод:
		GET
Создаем книгу, затем проверяем как она отображается в базе

Предусловие
Запущен Docker conteiner с API

Шаги

Шаг 1
Включить Рostman

Ожидаемый результат
Открывается Postman 

Шаг 2
Ввести в поле “Enter URL or paste text” адрес URL API первого запроса из тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 3
Слево от поля “Enter URL or paste text”, выбрать метод первого запроса из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 4 
Снизу от поля “Enter URL or paste text”, кликнуть на надпись "body", и еще ниже на "raw". Втавить значения JSON из тестовых данных

Ожидаемый результат
Введенный JSON отображается в поле

Шаг 5
Нажать кнопку “Send”

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 201 CREATED
-	Ответ на запрос выдает 
	{
            "author": "Роберт Мартин",
            "id": "Здесь появиться сгенерированое число id, его применяем в следующем методе",
            "isElectronicBook": false,
            "name": "Чистый код",
            "year": 1998
        }

Шаг 6
Ввести в поле “Enter URL or paste text” адрес URL API второго запроса из тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 7
Слево от поля “Enter URL or paste text”, выбрать метод второго запроса из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 8
Нажать кнопку “Send”

Ожидаемый результат
-	У книги присутствуют поля: "id", "author", "isElectronicBook", "name", "year"
-	У книги ключ "id" равен одному и тому же числу, что и при первом запросе
-	У книги "year" равен одному и тому же числу, что и при первом запросе
-	У книги "isElectronicBook" равен одному и тому же логическому типу, что и при первом запросе
-	У книги "name" равен одному и тому же названию, что и при первом запросе
-	У книги "author" равен одному и тому же автору, что и при первом запросе

------------------------------------------

Идентификатор
reg-302

Название
Проверка создания новой книги без поля "name"

Описание
Мы используем тестовые данные:
	URL API:
	http://localhost:5000/api/books
	Метод:
	POST
JSON:
        {
            "author": "Роберт Мартин",
            "id": "",
            "isElectronicBook": false,
            "year": 1998
        }
Пытается отправить запрос без обязательного поля "name" в JSON

Предусловие
Запущен Docker conteiner с API

Шаги

Шаг 1
Включить Рostman

Ожидаемый результат
Открывается Postman 

Шаг 2
Ввести в поле “Enter URL or paste text” адрес URL API из тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 3
Слево от поля “Enter URL or paste text”, выбрать метод из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 4 
Снизу от поля “Enter URL or paste text”, кликнуть на надпись "body", и еще ниже на "raw". Втавить значения JSON из тестовых данных

Ожидаемый результат
Введенный JSON отображается в поле

Шаг 5
Нажать кнопку “Send”

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 400 BAD REQUEST
-	Ответ на запрос выдает 
{
    "error": "Name is required"
}

-----------------------------------------

Идентификатор
reg-303

Название
Проверка создания новой книги только с полем "name"

Описание
Мы используем тестовые данные:
	Первый запрос:
		URL API:
		http://localhost:5000/api/books
		Метод:
		POST
	JSON:
        {
            "name": "Чистый код"
        }
	Второй запрос:
		URL API:
		http://localhost:5000/api/books/ сюда надо будет вставить значения, которое сгенерируется после первого запроса 
		Метод:
		GET
Создаем книгу, затем проверяем как она отображается в базе

Предусловие
Запущен Docker conteiner с API

Шаги

Шаг 1
Включить Рostman

Ожидаемый результат
Открывается Postman 

Шаг 2
Ввести в поле “Enter URL or paste text” адрес URL API первого запроса из тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 3
Слево от поля “Enter URL or paste text”, выбрать метод первого запроса из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 4 
Снизу от поля “Enter URL or paste text”, кликнуть на надпись "body", и еще ниже на "raw". Втавить значения JSON из тестовых данных

Ожидаемый результат
Введенный JSON отображается в поле

Шаг 5
Нажать кнопку “Send”

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 201 CREATED
-	Ответ на запрос выдает 
	{
    "book": {
        "author": "",
        "id": "Здесь появиться сгенерированое число id, его применяем в следующем методе",
        "isElectronicBook": false,
        "name": "Чистый код",
        "year": 0
    }
}

Шаг 6
Ввести в поле “Enter URL or paste text” адрес URL API второго запроса из тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 7
Слево от поля “Enter URL or paste text”, выбрать метод второго запроса из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 8
Нажать кнопку “Send”

Ожидаемый результат
-	У книги присутствуют поля: "id", "author", "isElectronicBook", "name", "year"
-	У книги ключ "id" равен одному и тому же числу, что и при первом запросе
-	У книги ключ "id" равен числу 
-	У книги "year" равен числу
-	У книги "isElectronicBook" имеет только булевое значение 

--------------------------------------------------
--------------------------------------------------
--------------------------------------------------

Метод исправления созданной книги:

Идентификатор
reg-401

Название
Проверка на исправление 

Описание
Мы используем тестовые данные:
	Первый запрос:
		URL API:
		http://localhost:5000/api/books
		Метод:
		POST
	Первый JSON:
        {
            "author": "Роберт Мартин",
            "id": "",
            "isElectronicBook": false,
            "name": "Чистый код",
            "year": 1998
        }
	Второй запрос:
		URL API:
		http://localhost:5000/api/books/ сюда надо будет вставить значения, которое сгенерируется после первого запроса 
		Метод:
		PUT
	Второй JSON:
	{
            "author": "Грегори Дэвид Робертс",
            "isElectronicBook": true,
            "name": "Шантарам",
            "year": 2003
        }
	Третий запрос:
		URL API:
		http://localhost:5000/api/books/ сюда надо будет вставить значения, которое сгенерируется после первого запроса 
		Метод:
		GET
Создаем книгу, затем исправляем ее. Потом проверяем как она отображается в базе

Предусловие
Запущен Docker conteiner с API

Шаги

Шаг 1
Включить Рostman

Ожидаемый результат
Открывается Postman 

Шаг 2
Ввести в поле “Enter URL or paste text” адрес URL API первого запроса из тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 3
Слево от поля “Enter URL or paste text”, выбрать метод первого запроса из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 4 
Снизу от поля “Enter URL or paste text”, кликнуть на надпись "body", и еще ниже на "raw". Втавить значения первого JSON из тестовых данных

Ожидаемый результат
Введенный JSON отображается в поле

Шаг 5
Нажать кнопку “Send”

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 201 CREATED
-	Ответ на запрос выдает 
	{
            "author": "Роберт Мартин",
            "id": "Здесь появиться сгенерированое число id, его применяем в следующем методе",
            "isElectronicBook": false,
            "name": "Чистый код",
            "year": 1998
        }

Шаг 6
Ввести в поле “Enter URL or paste text” адрес URL API второго запроса из тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 7
Слево от поля “Enter URL or paste text”, выбрать метод второго запроса из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 8
Снизу от поля “Enter URL or paste text”, кликнуть на надпись "body", и еще ниже на "raw". Втавить значения второго JSON из тестовых данных

Ожидаемый результат
Введенный JSON отображается в поле

Шаг 9
Нажать кнопку “Send”

Ожидаемый результат
-	У книги присутствуют поля: "id", "author", "isElectronicBook", "name", "year"
-	У книги ключ "id" равен одному и тому же числу, что и при первом запросе
-	У книги "year" равен одному и тому же числу, что и при втором запросе
-	У книги "isElectronicBook" равен одному и тому же логическому типу, что и при втором запросе
-	У книги "name" равен одному и тому же названию, что и при втором запросе
-	У книги "author" равен одному и тому же автору, что и при втором запросе

Шаг 10
Ввести в поле “Enter URL or paste text” адрес URL API третьего запроса из тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 11
Слево от поля “Enter URL or paste text”, выбрать метод третьего запроса из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 12
Нажать кнопку “Send”

Ожидаемый результат
-	У книги присутствуют поля: "id", "author", "isElectronicBook", "name", "year"
-	У книги ключ "id" равен одному и тому же числу, что и при первом запросе
-	У книги "year" равен одному и тому же числу, что и при втором запросе
-	У книги "isElectronicBook" равен одному и тому же логическому типу, что и при втором запросе
-	У книги "name" равен одному и тому же названию, что и при втором запросе
-	У книги "author" равен одному и тому же автору, что и при втором запросе

----------------------------------------


Идентификатор
reg-402

Название
Проверка на исправление без поля "name", "author" и "year" 

Описание
Мы используем тестовые данные:
	Первый запрос:
		URL API:
		http://localhost:5000/api/books
		Метод:
		POST
	Первый JSON:
        {
            "author": "Роберт Мартин",
            "id": "",
            "isElectronicBook": false,
            "name": "Чистый код",
            "year": 1998
        }
	Второй запрос:
		URL API:
		http://localhost:5000/api/books/ сюда надо будет вставить значения, которое сгенерируется после первого запроса 
		Метод:
		PUT
	Второй JSON:
	{
            "isElectronicBook": true
        }
Создаем книгу, затем исправляем ее без обязательныхх полей

Предусловие
Запущен Docker conteiner с API

Шаги

Шаг 1
Включить Рostman

Ожидаемый результат
Открывается Postman 

Шаг 2
Ввести в поле “Enter URL or paste text” адрес URL API первого запроса из тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 3
Слево от поля “Enter URL or paste text”, выбрать метод первого запроса из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 4 
Снизу от поля “Enter URL or paste text”, кликнуть на надпись "body", и еще ниже на "raw". Втавить значения первого JSON из тестовых данных

Ожидаемый результат
Введенный JSON отображается в поле

Шаг 5
Нажать кнопку “Send”

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 201 CREATED
-	Ответ на запрос выдает 
	{
            "author": "Роберт Мартин",
            "id": "Здесь появиться сгенерированое число id, его применяем в следующем методе",
            "isElectronicBook": false,
            "name": "Чистый код",
            "year": 1998
        }

Шаг 6
Ввести в поле “Enter URL or paste text” адрес URL API второго запроса из тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 7
Слево от поля “Enter URL or paste text”, выбрать метод второго запроса из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 8
Снизу от поля “Enter URL or paste text”, кликнуть на надпись "body", и еще ниже на "raw". Втавить значения второго JSON из тестовых данных

Ожидаемый результат
Введенный JSON отображается в поле

Шаг 9
Нажать кнопку “Send”

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 400 BAD REQUEST
-	Ответ на запрос выдает 
{
    "error": "Name is required"
}

--------------------------------------------------
--------------------------------------------------
--------------------------------------------------

Метод удаление книги:

Идентификатор
reg-401

Название
Проверка на исправление 

Описание
Мы используем тестовые данные:
	Первый запрос:
		URL API:
		http://localhost:5000/api/books
		Метод:
		POST
	Первый JSON:
        {
            "author": "Роберт Мартин",
            "id": "",
            "isElectronicBook": false,
            "name": "Чистый код",
            "year": 1998
        }
	Второй запрос:
		URL API:
		http://localhost:5000/api/books/ сюда надо будет вставить значения, которое сгенерируется после первого запроса 
		Метод:
		DELETE
	Третий запрос:
		URL API:
		http://localhost:5000/api/books/ сюда надо будет вставить значения, которое сгенерируется после первого запроса 
		Метод:
		GET
Создаем книгу, затем исправляем ее. Потом проверяем как она отображается в базе

Предусловие
Запущен Docker conteiner с API

Шаги

Шаг 1
Включить Рostman

Ожидаемый результат
Открывается Postman 

Шаг 2
Ввести в поле “Enter URL or paste text” адрес URL API первого запроса из тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 3
Слево от поля “Enter URL or paste text”, выбрать метод первого запроса из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 4 
Снизу от поля “Enter URL or paste text”, кликнуть на надпись "body", и еще ниже на "raw". Втавить значения первого JSON из тестовых данных

Ожидаемый результат
Введенный JSON отображается в поле

Шаг 5
Нажать кнопку “Send”

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 201 CREATED
-	Ответ на запрос выдает 
	{
            "author": "Роберт Мартин",
            "id": "Здесь появиться сгенерированое число id, его применяем в следующем методе",
            "isElectronicBook": false,
            "name": "Чистый код",
            "year": 1998
        }

Шаг 6
Ввести в поле “Enter URL or paste text” адрес URL API второго запроса из тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 7
Слево от поля “Enter URL or paste text”, выбрать метод второго запроса из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 9
Нажать кнопку “Send”

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 200 OK
-	Ответ на запрос выдает 
{
    "result": true
}

Шаг 10
Ввести в поле “Enter URL or paste text” адрес URL API третьего запроса из тестового набора данных

Ожидаемый результат
Введенный адрес отображается в поле

Шаг 11
Слево от поля “Enter URL or paste text”, выбрать метод третьего запроса из тестового набора данных 

Ожидаемый результат
Отображается выбранный метод

Шаг 12
Нажать кнопку “Send”

Ожидаемый результат
-	Запрос успешно инициализован
-	Статус равен 400 BAD REQUEST
-	Ответ на запрос выдает 
{
    "error": "Name is required"
}